name: ci
on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request: {}
jobs:
  lint-tox:
    name: lint (tox:lint)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v1
        with:
          python-version: '3.8.x'
          architecture: 'x64'
      - run: pip install tox
      - run: tox -e lint
  lint-clang-format:
    name: lint (clang-format)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v1
        with:
          python-version: '3.8.x'
          architecture: 'x64'
      - run: sudo apt-get update
      - run: sudo apt-get install -y clang-format-9
      - run: clang-format-9 --version
      - run: |
          if clang-format-9 --output-replacements-xml --style=file $(find fastcountvectorizer -name '*.cpp') $(find fastcountvectorizer -name '*.h') | grep -q '<replacement '; then 
            echo "clang-format failed"
            exit 1
          fi
  test-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.5.x', '3.6.x', '3.7.x', '3.8.x']
        architecture: ['x64']
    name: test (Python ${{ matrix.python-version }}, Linux ${{ matrix.architecture }})
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
      - run: pip install tox
      - run: tox -e test
      - run: pip install pybind11 numpy
      - run: cmake --version
      - run: cmake .
      - run: cmake --build . --target run-tests
  test-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ['3.7.x']
        architecture: ['x64']
    name: test (Python ${{ matrix.python-version }}, macOS ${{ matrix.architecture }})
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
      - run: pip3 install tox
      - run: tox -e test
      - run: pip install pybind11 numpy
      - run: cmake --version
      - run: cmake .
      - run: cmake --build . --target run-tests
  test-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.8.x']
        architecture: ['x86', 'x64']
        include:
          - python-version: '3.8.x'
            architecture: 'x86'
            win-arch: 'x86'
            cmake-arch: 'Win32'
          - python-version: '3.8.x'
            architecture: 'x64'
            win-arch: 'x86_amd64'
            cmake-arch: 'x64'
    name: test (Python ${{ matrix.python-version }}, Windows ${{ matrix.architecture }})
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
      - run: pip install tox
      # see: https://github.com/actions/virtual-environments/issues/294
      #      and solutions used at https://github.com/python-pillow/Pillow
      #      explanations at https://stevedower.id.au/blog/building-for-python-3-5-part-two/
      #      tox passenv usage at http://lists.idyll.org/pipermail/testing-in-python/2015-December/006590.html
      - name: run python tests
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.win-arch }}
          set MSSdk=1
          set DISTUTILS_USE_SDK=1
          set PY_VCRUNTIME_REDIST=true
          set TOX_TESTENV_PASSENV=DISTUTILS_USE_SDK MSSdk INCLUDE LIB PY_VCRUNTIME_REDIST
          tox -e test
      - run: pip install pybind11 numpy
      - run: cmake --version
      - run: cmake -A ${{ matrix.cmake-arch }} .
        # set Release build to avoid "fatal error LNK1104"
        # If not set, python38_d.lib will be tried for debug,
        # which does not exist.
        # Also note it needs to be set here at build time, not
        # at config time with CMAKE_BUILD_TYPE: https://stackoverflow.com/a/20423820
      - run: cmake --build . --target run-tests --config Release
  check-docs:
    name: check docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v1
        with:
          python-version: '3.8.x'
          architecture: 'x64'
      - run: pip install -rdocs/requirements.txt
      - run: pip install numpy
      - run: pip install .
      - run: |
          cd docs
          make html
  build-wheel-linux:
    needs: test-linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [cp35-cp35m, cp36-cp36m, cp37-cp37m, cp38-cp38]
        platform: [manylinux1_i686, manylinux1_x86_64]
        include:
          - platform: manylinux1_i686
            docker-image: quay.io/pypa/manylinux1_i686
            pre-cmd: linux32
          - platform: manylinux1_x86_64
            docker-image: quay.io/pypa/manylinux1_x86_64
            pre-cmd: ""
    name: "build wheels for Linux (${{ matrix.python-version }} ${{ matrix.platform }})"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: "build wheel"
        run: |
          docker run --rm \
            -e PLAT=${{ matrix.platform }} \
            -e PYVER=${{ matrix.python-version }} \
            -v `pwd`:/repo \
            ${{ matrix.docker-image }} \
            ${{ matrix.pre-cmd }} /repo/.github/workflows/build_wheels.sh
      - uses: actions/upload-artifact@v1
        with:
          name: wheelhouse
          path: wheelhouse
  upload-pypi:
    name: "upload package to pypi"
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs:
      - lint-tox
      - lint-clang-format
      - build-wheel-linux
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v1
        with:
          python-version: 3.8.x
      - uses: actions/download-artifact@v1
        with:
          name: wheelhouse
      - run: python setup.py sdist
      - run: pip install twine
      - name: "upload to pypi"
        run: |
          twine upload --skip-existing dist/* wheelhouse/*
        env:
          TWINE_NON_INTERACTIVE: "true"
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
