// vim: ts=2:sw=2:sts=2:et

// Buzhash (AKA hashing by cyclic polynomial) as described by
// (Cohen, 1997 p.301).

#ifndef BUZHASH_H
#define BUZHASH_H

#include <cstdint>

namespace buzhash {

// TransformationT in (Cohen, 1997). We omit TransformationTPrime and
// compute it on the fly.
const uint64_t transformation_table_64[256] = {
    0x0873C7BA8E97059E, 0xE731B1322D7EBB47, 0x887D100F45F5560E,
    0x7734DF62C0DB66AD, 0x7B176995AF816ED7, 0xF73CF06187420FD3,
    0x383F09C3AB7CBA71, 0x65B51067987B1171, 0xA6B92ABF0F554D10,
    0x3B150B551ACB2B4A, 0x762AD534D69FE27F, 0xC9109F7B32555C25,
    0x3B948C2438FCE49A, 0xC38F866BD826AAFB, 0xF56994B024688295,
    0x0A5D2F3A8EAF0169, 0x5D96DC19FB494B4D, 0x181551C64BF825E5,
    0x7F5B44BF2002DAA6, 0x2B9EA2CEC584FB77, 0x4CDC33A3BE6B19D5,
    0xF960BD71742903AD, 0x63DC89694D82C69A, 0xAFD65CF01B306257,
    0x0C9AC82E700108D6, 0xD15618C82CB03326, 0x4447D498344B4643,
    0x615B3036A3DDC7A2, 0xC9B5907BA7B1B63C, 0xB9BDDAEEA2B21000,
    0xF8E93535AF7CAED9, 0x08A871022B10E7CE, 0x1836789229F62BA9,
    0x4F7A54A15040C17E, 0x735298213FA357C0, 0xF60C69402B8E526E,
    0x0B55E702680FF162, 0x485F7F27FA75173B, 0x3B1D836DA1D1ADE8,
    0xB2697D7CB724769F, 0x08BC0AFFA771A768, 0xE717ECC75F130639,
    0x6DDF354E7983100A, 0xE14E97B87C691961, 0xE2603CA5B7DC8708,
    0x40A37CDBA3DE04AC, 0xB907B53F900E04F7, 0x9A54E7F3CE5B0A57,
    0x0DDE51163DBEAB1F, 0xECB5C490FB109A22, 0x81B2706B21FDA05A,
    0xF3B1AEFE37FF1602, 0x35164C06190BFD2C, 0xF6A1C6D4BB4BEB27,
    0xB82A362DF1FF8D75, 0x52DA8164EF692FED, 0x2F71BDE3D6E9FE44,
    0x0F4A65CC02864DA4, 0x26C1088CFE9018A8, 0xEE4E624CC7C8FE8E,
    0x11A6024CC43AA91C, 0xF8318BBDA9D14817, 0xE357D2A82C04F1E2,
    0xDBF4D24BE19AFD45, 0xAE3EAF79310C44B2, 0xC587460A4A895863,
    0x9310DF2D36BC4328, 0x2346ADA3F2E1BF7F, 0x67D93B650C8FCCD6,
    0xC176525DC6082E75, 0x948AA2F56CD44D49, 0x675FD8B3E8D361A1,
    0xDECDBC22002F2720, 0xE805ECC9C0F7E584, 0x8344F8320A7857C4,
    0x93AA460D128CF2FA, 0x67AA3C2582371679, 0x0DEFE6F930F3E6C7,
    0x1E1C9AC6DD5154E3, 0x2FF16505878E77C8, 0xA41147DA4A76AA25,
    0x0FADE9F048CD56FA, 0x7FFFE8584EEB7FC7, 0x97C3CCDD00B52687,
    0xF177B29DCD525AB1, 0x5930CD35AE93FA7A, 0xB0318F2418BC1E51,
    0x463DC5BEE4143364, 0x2D4672D2F5295397, 0xCE85ECE1EB0012B8,
    0x16AE076A4CFDA5A4, 0x55E49ED63F8478C5, 0x1D40211E073E874F,
    0x4E08CE04450F6C42, 0xAA72B9C06F0229DE, 0xF93760ADC5C5E10D,
    0xFBF8E17BD05F494E, 0xA5F274D1D16FDD6F, 0x3A1DC598A57695C8,
    0xF823DCCEF9ED4508, 0xB3DCEBBEA239A3F2, 0x8048CD7BF1444BCD,
    0x7E82A9B57E81412D, 0x2A6A2602A42E256E, 0x14FD471424815DF0,
    0xA318D458D16903C9, 0xB77E4183E6971CCA, 0x0DDC9EF408E01D9D,
    0xAE84D7E838B15BFE, 0x3EDAA333FA515BDE, 0xB0BC682B6BE671AC,
    0xB368DDF409FCF83A, 0x76CCA7843506E43F, 0x88AB6F49EF1799D7,
    0xFECC232858E45B08, 0x85E18D78AEBB8538, 0x0561D00F0CFDA890,
    0x26E45D5A0312F346, 0xAB7E88762F79761E, 0x06FF6777900D5FD6,
    0xDC7ABC0DBCF2F70B, 0x30228FF5656FD2B7, 0xB3D5F0D38825702D,
    0xA2055B83D8B1B8CA, 0x67D46EEF02B577E5, 0xCE7B6E2652F8DD5D,
    0xA4B3572561F14F59, 0xD8BF4680744563B0, 0x9A339957BA824F85,
    0xCB92886AED80E267, 0x0D34B98BC740497B, 0xEDEB56B375350BC3,
    0x7266ED584806B251, 0x3A968E2C59DF9316, 0x12CDD08336FEA785,
    0x0B594D53A7D8B9FC, 0x061F4B9EF0019580, 0x3149E23AE467094C,
    0xCE4CB334218101E1, 0x950825E607323C44, 0x784F86CD209F5368,
    0x539BE8D38952F54B, 0x09449D3D9DADD132, 0x27C0DBA664FE462C,
    0xE980E114152E0AFF, 0xC145991DA8A95E4F, 0x4B1DE33413FD5480,
    0x9B96B49F8FD3A2F2, 0xBE9AE79EBD8AC17F, 0x88AD327820069DF2,
    0xA796C58B79754656, 0x9404C56951C7AA59, 0x2BA130CB60C138FB,
    0x52CB97A66063A55E, 0xC4C4914330BFADB2, 0x65C28201BCBA2F29,
    0x491649FFCC0608C6, 0xCFD1D17A4052F983, 0xEB85799CC891EC53,
    0x66252F31248EDCC0, 0xA87C9E7A45BF3AF0, 0x8D2CEB2F4901BBF4,
    0x623A0587410A506A, 0xEA5AF03ED16069AD, 0xD94B3D086479E036,
    0x738865242F4FE399, 0x91E6268FE1601D1C, 0x862E1B8CACF08267,
    0x48B333DA25D680CE, 0x1C156CD73AD7A275, 0xD60B0FC466BD6820,
    0x777D90EF432CD5F8, 0x03B4939163F8B212, 0x5D74CCEEE3BF4BAC,
    0xA26DB089BDAA069D, 0xB0D85B0990064FC5, 0xBD59D0934DFD8E7F,
    0x8D0FF5FB47836DDE, 0x6FEDA64B5B4D5F3A, 0x41E7EDD16DFC6F37,
    0x5316F24365ADCD78, 0x337F5542CBED3192, 0x8E588D8B99DD405C,
    0xB409D76C85C9372E, 0x2AA1841316CE3240, 0xFDA438611324ED7C,
    0xF6B947A961AFDB95, 0x43C76B2ADBBDA74E, 0x2502BC632948D518,
    0x0FDEBFDF23A7C6E9, 0x0BC14ABDB988422E, 0xBFA60446F50480E8,
    0x3186E9D59EB8753C, 0xBBA741CC386E6341, 0x4646549890E5A80E,
    0x0490D71E83C4F742, 0x839B175A2380F063, 0x69A1E100E53A12C7,
    0x6648C531326A758C, 0xDFC381A247EA436A, 0xE383E40CD07040A0,
    0x9E5E7526EF748C68, 0x3DF53D622DDCEBDF, 0x1DB0DB11702EE86A,
    0x9DCFBFF4D2A63DF9, 0xDC6CE4E3CF4FF452, 0x82E66646D29D50DA,
    0x81025B356F6E8FDE, 0xE0E612991C9DDD00, 0x0ACFE3F9E71717AC,
    0x5F379EF04A13B3AD, 0xCC0DD4B63597AF7C, 0x530F27C8F9AD7825,
    0x82169212BBEAF9B2, 0x6E16054DA328030B, 0x363E53619744A132,
    0xDA75B16A6FAD6414, 0xD8539C2186C3E570, 0x3300A31DDCB44B8E,
    0x6A176EED158096DA, 0x9E178C3C4188FF09, 0xCCA65729BB132BAC,
    0x55109BE20BCB6977, 0xC442F9D149951E4B, 0xDDC980365CE3A8A0,
    0x70F14D0BFCE2E592, 0x1CEAADC1148112AD, 0x8A0B6711A23B9920,
    0x9F1EF70738ECFE89, 0x85378266659511CB, 0x1F497353923E26F0,
    0xB166B22661B8C418, 0x9EA7AC3114B6D749, 0xD7D4AC796A181717,
    0xDB4B868AAB0DCECF, 0x9CC75F0273548DDD, 0x7666517D760E5991,
    0x5EF0B3242113B92C, 0x8ABC89203B359B75, 0xCE44CC5A04D02D5D,
    0x0BBD1168983A6608, 0xA9E67C56A06B91E8, 0xB1465B7BBCB82A6F,
    0x0AF369C806F89D2E, 0x35D6E4FD8A3542F3, 0x2CA2A08ADAD7B8F4,
    0x7D95553410BB275A, 0x092F0069132B44C3, 0x11859DCA22A5231F,
    0x1C26A31DCC93D111, 0x1171D07AAEC95813, 0xD7401AC53E3F672C,
    0xFCBBD832D5CD665F, 0xD1F642AB8D672B61, 0x3AC7D7849C08C440,
    0xBF85044EB28FEB4F,
};

const uint32_t transformation_table_32[256] = {
    0x1C1C77D3, 0xD5DD4871, 0xF5DF2FC4, 0xD2E6AAE3, 0xF5D83207, 0x7B3D71DD,
    0xA20BBB3E, 0x74A80B26, 0x5287EF53, 0xD4329BA8, 0xD4EDCA41, 0xC35D8532,
    0xAEE7418E, 0x5E7E6B19, 0x1D89547E, 0x71813604, 0xC9C7F613, 0xE6225F70,
    0x0FF9E56B, 0x054541C2, 0x5B8707F8, 0xA8121858, 0x9649FDD4, 0xB8E09D8F,
    0xDB38C4EB, 0x8F1FEA3D, 0xA398C5DF, 0x6AF16F70, 0x7B6B3D0C, 0xF003AE4C,
    0xAE27487C, 0x5910C19C, 0x18A516F4, 0x31590016, 0x0E5C01CC, 0xE9F53484,
    0xA5B669E5, 0x552841FA, 0x263FF5D6, 0xC627E907, 0xBD7C0819, 0x595F624F,
    0x3EA0EA47, 0x8A1BFDDA, 0x8D418BA6, 0xAE20FC45, 0x1A9F680E, 0x940C35E1,
    0x21D29280, 0x20C804A7, 0xB8D2E899, 0xA4FB1A93, 0xE5941044, 0x1F339274,
    0x843EA73E, 0xBCAF727F, 0xB0F0F018, 0x704CFAA0, 0x3AF5827F, 0xA17B7F1B,
    0x869B574C, 0xF05B6AB9, 0xBDDCCFD9, 0x104085E1, 0x69FBED31, 0x6466CB89,
    0xCF44BD3C, 0xC0CED15D, 0xCD10877F, 0x786FA0E0, 0x35757513, 0xEF17B7FF,
    0x803E8619, 0xEBA6E946, 0x8CCC0158, 0x9E7C5191, 0xD626EB1F, 0xEC5E5D1E,
    0x04028D44, 0x914C1FB5, 0x6FA6B327, 0xE0B507A5, 0x7AE155DD, 0x0DA6068C,
    0xFB8704B3, 0x101448D3, 0xEDAF3A07, 0xEB4809E4, 0x41AB3EA5, 0x2B855FD4,
    0x71ACCC15, 0x19C94387, 0xE2991CFE, 0x74CB7FD3, 0x44C633DA, 0x445E629F,
    0x8C3FD56F, 0x2E764238, 0x4A45A720, 0xECDF6949, 0xD4160C62, 0x2BD24136,
    0xEB63CAC3, 0x65FDD555, 0x25F7F2B6, 0x0B8662E2, 0x203DA65E, 0x42F8F17B,
    0x99B3A8E9, 0xDFFA4C71, 0x8F6A0C34, 0xE9DC06AA, 0xC319DE24, 0x94A23BC8,
    0x16A2CE63, 0x56114FB8, 0xC33CFFD6, 0x607BC3CF, 0x136732D7, 0xEA8120AC,
    0x7C7C765D, 0x863162BF, 0x6371C9D3, 0xB8D9249E, 0x04272156, 0xA4301BD6,
    0xA4D430B8, 0x120077D7, 0x49F6CA97, 0xCE2FB654, 0x589BBE17, 0x327AEBB4,
    0xB303F415, 0xA0A05B09, 0xE4BFA2FE, 0x40612F07, 0xFB924498, 0x102D0388,
    0x88E43FB9, 0xE2EFAB3C, 0x4ABF3DBA, 0x568EF9D6, 0x6F952D12, 0xC40D0D6C,
    0xB63C4A60, 0xFAAF5183, 0x17BB4297, 0xA672DBEF, 0xAEDA6491, 0x7CC2FF5D,
    0x6BF3F506, 0xABAF0B1C, 0x66DC34EA, 0x3C65EF74, 0x25B30B37, 0x17D4C8A0,
    0xD8A5A614, 0xBE084573, 0x62972895, 0xFE39BA2B, 0xA3FF154F, 0x8877BF56,
    0x99E5A398, 0x4822E37C, 0xC99CE8B7, 0x085701E5, 0xFFAA8FFD, 0x71280F3C,
    0xE1E400A3, 0x19B6BBD3, 0x2C456FDA, 0xC10202E6, 0xC17D3654, 0x7454AAF1,
    0xBCDE3D3D, 0x543BE28E, 0x4702C5F8, 0xD9718D13, 0x9C47AEB7, 0x433F3F73,
    0xF0FC7788, 0x478BDF75, 0x0708B81B, 0xF5710DED, 0xCBF94000, 0x87BB9579,
    0xC5D216F3, 0x1FE07327, 0x74A14737, 0xE40B5746, 0x187261FA, 0xD7D602E6,
    0x413225AE, 0xDB1EA3C0, 0x23DCC2C8, 0xA299EB44, 0x7A9DE299, 0x70F12041,
    0x078C832A, 0xA2D70425, 0x324CB4DE, 0x51C0D3D6, 0xA86E6770, 0xAF31F3B0,
    0x55E39FAC, 0xDB778F29, 0xB128BC71, 0x6C1AFC64, 0xDFFBD5EA, 0x6DD05800,
    0xD6B6FC83, 0xF06B59A7, 0xE296BD44, 0x3EE3AFFE, 0x2AF0FDE1, 0x9CFA7840,
    0x7307122C, 0x24EFD46B, 0xD5D96F12, 0x44B0EEA8, 0x37310363, 0xEDFFDF13,
    0x141885A4, 0x4AF5C8C8, 0x82716AF6, 0xB099A6A6, 0x109C5448, 0xE1C9B9F2,
    0xB244BAD0, 0x8BC0F10F, 0xBDF0FAF0, 0xA473BC57, 0x20154590, 0x49D8761A,
    0x61F498AC, 0x00FDF0B8, 0xA333EC5B, 0x46961679, 0x197A7E46, 0xDC3D1A79,
    0xC505A529, 0xEAF0DDE2, 0x34192EF9, 0x3D1D0639, 0xC4BDD7E9, 0x6F8B3198,
    0xDD605557, 0x4BD08B3C, 0x0FBF26EA, 0x06C4C363, 0xBC3326FA, 0xE59230F0,
    0xDB6E5394, 0x143FC52C, 0x831C17BF, 0x7B490BA4,
};

const uint16_t transformation_table_16[256] = {
    0x0DB3, 0x06B8, 0xBCE4, 0x1266, 0x58EB, 0x69F6, 0x8DD8, 0x210A, 0xACA0,
    0xD79F, 0x2F21, 0xBE91, 0xD087, 0xEB55, 0x5E15, 0x689A, 0xBDCA, 0x0583,
    0xD730, 0x3F39, 0x5188, 0x9DB9, 0x7815, 0xC4C6, 0x4235, 0xF30F, 0x3963,
    0x21F3, 0x8DD7, 0xD0BC, 0xD523, 0x428F, 0x799D, 0xA02E, 0xF97C, 0x279E,
    0x0813, 0xEDAF, 0xB6C8, 0xD277, 0x0E66, 0xB458, 0x4F10, 0xA73F, 0x91AB,
    0x6BF5, 0x73DC, 0xC320, 0xD2AE, 0x6115, 0x9BDF, 0x614A, 0x235C, 0x08F9,
    0xF075, 0xE6FA, 0x031F, 0x8DCA, 0xA22E, 0xB56E, 0xA922, 0x8DF3, 0xAAE0,
    0x660D, 0x2B15, 0xAD47, 0xCBA9, 0x3820, 0x2E6E, 0xF09B, 0xFA87, 0x45A6,
    0x7AAD, 0xD05E, 0x7CC2, 0xF600, 0xA7C3, 0xB17B, 0xC86F, 0x0458, 0x377C,
    0xD869, 0xE70A, 0x2906, 0xB48F, 0xD5E7, 0x3FA0, 0xC015, 0x0BEF, 0xC3CF,
    0x5FB6, 0x5AF4, 0xCC85, 0xB7D8, 0x0320, 0x2144, 0x65BC, 0x7399, 0xA478,
    0xD6BF, 0x7342, 0x6C20, 0x94A0, 0xC2DC, 0xDD35, 0x7D24, 0xEA0E, 0x3E5A,
    0xDEB0, 0xC482, 0x2AB5, 0x0973, 0xD105, 0xA8E9, 0x7B5B, 0x9E9C, 0x1F34,
    0x6363, 0x7D02, 0x1B8F, 0xC55E, 0x2A8A, 0x273A, 0xE7A9, 0x564E, 0xA46F,
    0xCAD1, 0x8D20, 0xF230, 0x7670, 0x5D01, 0xFE16, 0x9985, 0xC2B2, 0xA8B5,
    0x4C34, 0xD5CD, 0xF87F, 0xCB3E, 0xE532, 0xE7D6, 0xE642, 0x2DE9, 0xA4E8,
    0x182C, 0x2943, 0x2397, 0x1DC8, 0x21C8, 0x450A, 0x48FD, 0x1980, 0x7BF7,
    0x4C22, 0x1E54, 0x03B8, 0x5403, 0xFC51, 0xFD2D, 0x6AC6, 0x4DDB, 0xD1C4,
    0x392F, 0x56D6, 0x9C22, 0x5B29, 0x6942, 0x5609, 0x7E28, 0x3F08, 0xE592,
    0xBF3A, 0xBFF3, 0xC784, 0xCC90, 0x88A4, 0x90BF, 0xC437, 0x6719, 0x39DE,
    0xFC56, 0xD9E6, 0x2307, 0x5580, 0xB2A4, 0xC25F, 0x3B08, 0xF0AB, 0x82C3,
    0x1C9C, 0xAE74, 0xF14C, 0x24DD, 0xD675, 0x8DEE, 0x884F, 0xBE6D, 0x553D,
    0x197F, 0x41AA, 0xCE2A, 0x65BF, 0xB98E, 0xB68F, 0xC8F3, 0xC5C1, 0x5C0B,
    0xE40C, 0x6BD3, 0x606D, 0x2C60, 0x7CF6, 0xF3AE, 0xC49B, 0xBD91, 0xBD57,
    0x2568, 0xF814, 0xFB60, 0xD0F1, 0xD65B, 0x64F7, 0xEB54, 0xF6FE, 0xB29E,
    0x652E, 0x3F34, 0x45C8, 0x678A, 0x5F2A, 0x0B5E, 0x86A2, 0xAE00, 0x9E19,
    0xCEFA, 0xD54B, 0x5B68, 0xE838, 0xAF8A, 0x4E9F, 0xD7D2, 0xBA42, 0x9C1E,
    0x298D, 0x007F, 0xD888, 0x1320, 0xBD29, 0xA702, 0x2E49, 0x163D, 0xF723,
    0x5E78, 0xB108, 0x8C23, 0x9106,
};

template <typename INT>
struct transform_table {
  const INT* table();
};

template <>
struct transform_table<uint64_t> {
  const uint64_t* table() { return transformation_table_64; }
};

template <>
struct transform_table<uint32_t> {
  const uint32_t* table() { return transformation_table_32; }
};

template <>
struct transform_table<uint16_t> {
  const uint16_t* table() { return transformation_table_16; }
};

template <typename INT>
struct _ops {
  INT rotl(INT a, std::size_t shift) const {
    return (a << shift) | (a >> (sizeof(INT) * 8 - shift));
  }
};

template <class INT, class TABLE = transform_table<INT>, class OPS = _ops<INT>>
class Buzhash {
 private:
  static const uint8_t _delta = 1;
  INT _hash_word;
  std::size_t _length;
  INT* _buffer;
  std::size_t _buffer_idx;
  std::size_t _buffer_old_idx;
  const INT* _table;
  const OPS _ops;
  const std::size_t _delta_shift;

  inline void _save_transform(INT transform) {
    _buffer[_buffer_idx] = transform;
    if (++_buffer_idx == _length) {
      _buffer_idx = 0;
    }
  }

  inline INT _old_transform() {
    const INT res = _buffer[_buffer_old_idx];
    if (++_buffer_old_idx == _length) {
      _buffer_old_idx = 0;
    }
    return res;
  }

 public:
  Buzhash(const int length, TABLE table = TABLE())
      : _hash_word(0),
        _length(length),
        _buffer(new INT[length]),
        _buffer_idx(0),
        _buffer_old_idx(0),
        _table(table.table()),
        _ops(OPS()),
        _delta_shift(length * _delta % (sizeof(INT) * 8)) {}

  ~Buzhash() { delete _buffer; }

  static INT hash_once(const char* c, const std::size_t length) {
    const INT* _table = TABLE().table();
    const OPS _ops = OPS();
    INT hash = 0;
    INT transform = 0;

    for (std::size_t i = 0; i < length; i++) {
      transform = _table[c[i]];
      hash = _ops.rotl(hash, _delta);
      hash ^= transform;
    }

    return hash;
  }

  static INT hash_once(const char c) {
    const INT* _table = TABLE().table();
    const OPS _ops = OPS();
    INT hash = 0;
    INT transform = _table[c];
    hash = _ops.rotl(hash, _delta);
    hash ^= transform;
    return hash;
  }

  INT hash(const char* c) {
    INT hash = 0;
    INT transform = 0;

    for (std::size_t i = 0; i < _length; i++) {
      transform = _table[c[i]];
      _save_transform(transform);
      hash = _ops.rotl(hash, _delta);
      hash ^= transform;
    }

    _hash_word = hash;
    return hash;
  }

  INT update(const char* c, const std::size_t size) {
    INT hash = _hash_word;
    INT transform = 0;
    INT old_transform;
    for (std::size_t i = 0; i < size; i++) {
      old_transform = _old_transform();
      transform = _table[c[i]];
      _save_transform(transform);
      hash = _ops.rotl(hash, _delta);
      hash ^= transform;
      hash ^= _ops.rotl(old_transform, _delta_shift);
    }
    _hash_word = hash;
    return hash;
  }

  INT update(const char c) {
    INT hash = _hash_word;
    const INT old_transform = _old_transform();
    const INT transform = _table[c];
    _save_transform(transform);
    hash = _ops.rotl(hash, _delta);
    hash ^= transform;
    hash ^= _ops.rotl(old_transform, _delta_shift);
    _hash_word = hash;
    return hash;
  }

  void reset() {
    _hash_word = 0;
    _buffer_idx = 0;
    _buffer_old_idx = 0;
  }
};

}  // namespace buzhash

#endif  // BUZHASH_H
